import React, { Component } from 'react';
import { Input, Button, Modal, Grid, Header, Icon } from 'semantic-ui-react';
import 'semantic-ui-css/semantic.min.css';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_defaultDay__1rADY{\r\n    padding: 15px;\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    cursor: pointer;\r\n    color: #313131;\r\n}\r\n\r\n.styles_otherDay__LCLvU{\r\n    padding: 15px;\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    cursor: pointer;\r\n    color: #B3B3B3;\r\n}\r\n\r\n.styles_defaultDay__1rADY:hover, .styles_otherDay__LCLvU:hover{\r\n    background-color: blue;\r\n    color: #ffffff; \r\n}\r\n\r\n.styles_selectedDay__3_PZY{\r\n    padding: 15px;\r\n    background-color: blue;\r\n    font-size: 13px;\r\n    font-weight: bold;\r\n    color: #ffffff;\r\n    cursor: pointer;\r\n}\r\n\r\n.styles_selectedYear__1ygIZ{\r\n    color: blue;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    padding: 5px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n}\r\n\r\n.styles_defaultYear__QO_BN{\r\n    color: #B3B3B3;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    padding: 5px;\r\n    font-size: 13px;\r\n    cursor: pointer;\r\n}\r\n";
var styles = { "defaultDay": "styles_defaultDay__1rADY", "otherDay": "styles_otherDay__LCLvU", "selectedDay": "styles_selectedDay__3_PZY", "selectedYear": "styles_selectedYear__1ygIZ", "defaultYear": "styles_defaultYear__QO_BN" };
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var RectDatePicker = function (_Component) {
  inherits(RectDatePicker, _Component);

  function RectDatePicker(props) {
    classCallCheck(this, RectDatePicker);

    var _this = possibleConstructorReturn(this, (RectDatePicker.__proto__ || Object.getPrototypeOf(RectDatePicker)).call(this, props));

    _this.open = function () {
      return _this.setState({ open: true });
    };

    _this.close = function () {
      return _this.setState({ open: false });
    };

    _this.checkDate = function (date1, date2) {
      if (date1.getFullYear() === date2.getFullYear()) {
        if (date1.getMonth() === date2.getMonth()) {
          if (date1.getDate() === date2.getDate()) {
            return 0;
          } else {
            return 1;
          }
        } else {
          return 2;
        }
      } else {
        return 3;
      }
    };

    _this.selectDate = function (selectedDate) {

      _this.setState({
        selected: selectedDate,
        selectedDateString: selectedDate.getDate().toString().padStart(2, 0) + "/" + (selectedDate.getMonth() + 1).toString().padStart(2, 0) + "/" + selectedDate.getFullYear()
      }, function () {
        _this.updateData();_this.close();_this.props.onSelect(selectedDate);
      });
    };

    _this.navigateToday = function () {
      var selectedDate = new Date();
      _this.setState({
        selected: selectedDate,
        selectedDateString: selectedDate.getDate().toString().padStart(2, 0) + "/" + (selectedDate.getMonth() + 1).toString().padStart(2, 0) + "/" + selectedDate.getFullYear()
      }, function () {
        _this.updateData();
      });
    };

    _this.renderMonths = function () {
      var _this$state = _this.state,
          months = _this$state.months,
          selected = _this$state.selected;

      var currentMonth = months[selected.getMonth()];
      return months.map(function (item, index) {
        return React.createElement(
          Grid.Column,
          { key: index, textAlign: 'center', onClick: function onClick() {
              return _this.navigateMonth(index);
            }, style: { cursor: 'pointer' } },
          React.createElement(
            Header,
            { as: 'h5', style: item === currentMonth ? { color: 'blue' } : { color: '#B3B3B3' } },
            item
          )
        );
      });
    };

    _this.renderWeekHeaders = function () {
      var daysInWeek = _this.state.daysInWeek;

      return daysInWeek.map(function (item, index) {
        return React.createElement(
          Grid.Column,
          { key: index, textAlign: 'center', style: { padding: 5 } },
          React.createElement(
            Header,
            { as: 'h5', style: { color: '#B3B3B3' } },
            item
          )
        );
      });
    };

    _this.renderYears = function () {
      var _this$state2 = _this.state,
          years = _this$state2.years,
          selected = _this$state2.selected;

      return years.map(function (item) {
        return React.createElement(
          'div',
          { onClick: function onClick() {
              return _this.navigateYear(item);
            }, key: item,
            className: selected.getFullYear() === item ? styles.selectedYear : styles.defaultYear },
          item
        );
      });
    };

    _this.renderDays = function () {
      var _this$state3 = _this.state,
          days = _this$state3.days,
          selected = _this$state3.selected;

      return days.map(function (item, index) {

        var dateRange = _this.checkDate(item, selected);
        return React.createElement(
          Grid.Column,
          { key: index, textAlign: 'center',
            onClick: function onClick() {
              return _this.selectDate(item);
            }, style: { padding: 5 } },
          React.createElement(
            'div',
            { className: dateRange == 0 ? styles.selectedDay : dateRange < 2 ? styles.defaultDay : styles.otherDay },
            item ? item.getDate() : ''
          )
        );
      });
    };

    _this.navigateMonth = function (month) {
      var date = _this.state.selected;
      date.setMonth(month);
      _this.setState({
        selected: date
      }, function () {
        return _this.updateData();
      });
    };

    _this.navigateYear = function (year) {
      var date = _this.state.selected;
      date.setFullYear(year);
      _this.setState({
        selected: date
      }, function () {
        return _this.updateData();
      });
    };

    var today = new Date();
    _this.state = {
      open: false,
      daysInWeek: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      selected: props.selected ? props.selected : today,
      selectedDateString: '',
      months: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      days: [],
      startYear: props.startYear ? props.startYear : today.getFullYear() - 5,
      years: []
    };

    return _this;
  }

  createClass(RectDatePicker, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateData();
    }
  }, {
    key: 'updateData',
    value: function updateData() {
      var _state = this.state,
          selected = _state.selected,
          startYear = _state.startYear;

      // generate days

      var firstDate = new Date(selected.getFullYear(), selected.getMonth(), 1);
      var lastDate = new Date(selected.getFullYear(), selected.getMonth() + 1, 1);
      lastDate.setDate(lastDate.getDate() - 1);

      var date = new Date(firstDate);
      var days = [];
      var years = [];
      // pre fill    
      while (date.getDay() !== 0) {
        date.setDate(date.getDate() - 1);
        days.unshift(new Date(date));
      }
      date = new Date(firstDate);
      while (date.getMonth() === selected.getMonth()) {
        days.push(new Date(date));
        date.setDate(date.getDate() + 1);
      }

      while (days.length < 42) {
        days.push(new Date(date));
        date.setDate(date.getDate() + 1);
      }

      var start = startYear;
      var end = start + 9;
      while (start <= end) {
        years.push(start);
        start++;
      }
      this.setState({
        days: days,
        years: years
      });
    }
  }, {
    key: 'navigateYearPage',
    value: function navigateYearPage(page) {
      var _this2 = this;

      var date = this.state.selected;
      var newStartYear = date.getFullYear() + 11 * page;
      date.setFullYear(newStartYear);
      this.setState({
        selected: date,
        startYear: newStartYear
      }, function () {
        return _this2.updateData();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state2 = this.state,
          open = _state2.open,
          selected = _state2.selected,
          selectedDateString = _state2.selectedDateString,
          months = _state2.months;

      return React.createElement(
        'div',
        null,
        React.createElement(Input, { icon: 'calendar', iconPosition: 'left', placeholder: 'DD/MM/YYYY', onClick: this.open, value: selectedDateString }),
        React.createElement(
          Modal,
          {
            open: open,
            closeOnEscape: false,
            closeOnDimmerClick: false,
            onClose: this.close,
            size: 'small'
          },
          React.createElement(
            Modal.Header,
            null,
            React.createElement(
              Grid,
              { columns: 12 },
              this.renderMonths()
            )
          ),
          React.createElement(
            Modal.Header,
            null,
            React.createElement(
              Grid,
              null,
              React.createElement(
                Grid.Row,
                { style: { padding: 6, alignItems: 'center' } },
                React.createElement(Grid.Column, { width: 2 }),
                React.createElement(
                  Grid.Column,
                  { width: 12 },
                  React.createElement(
                    Grid,
                    { columns: 7, style: { padding: 10 } },
                    this.renderWeekHeaders()
                  )
                ),
                React.createElement(
                  Grid.Column,
                  { width: 2 },
                  React.createElement(
                    Button,
                    { basic: true, compact: true, onClick: this.navigateToday },
                    'Today'
                  )
                )
              )
            )
          ),
          React.createElement(
            Modal.Content,
            null,
            React.createElement(
              Grid,
              null,
              React.createElement(
                Grid.Row,
                { style: { padding: 6 } },
                React.createElement(
                  Grid.Column,
                  { width: 2, textAlign: 'center' },
                  React.createElement(Icon, { key: '0', name: 'chevron up', color: 'blue', style: { marginBottom: 10 }, onClick: function onClick() {
                      return _this3.navigateYearPage(-1);
                    } }),
                  this.renderYears(),
                  React.createElement(Icon, { key: '1', name: 'chevron down', color: 'blue', style: { marginBottom: 10 }, onClick: function onClick() {
                      return _this3.navigateYearPage(1);
                    } })
                ),
                React.createElement(
                  Grid.Column,
                  { width: 12 },
                  React.createElement(
                    Grid,
                    { columns: 7, style: { padding: 10, borderLeft: '1px solid rgba(179, 179, 179, 0.3)', borderRight: '1px solid rgba(179, 179, 179, 0.3)' } },
                    this.renderDays()
                  )
                ),
                React.createElement(
                  Grid.Column,
                  { width: 2, textAlign: 'center', style: { display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' } },
                  React.createElement(
                    Header,
                    { as: 'h1', style: { padding: 0, margin: 0 } },
                    selected.getDate()
                  ),
                  React.createElement(
                    Header,
                    { as: 'h3', style: { padding: 0, margin: 0 } },
                    months[selected.getMonth()]
                  ),
                  React.createElement(
                    Header,
                    { as: 'h4', style: { padding: 0, margin: 0, color: '#B3B3B3' } },
                    selected.getFullYear()
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);
  return RectDatePicker;
}(Component);

export { RectDatePicker };
//# sourceMappingURL=index.es.js.map
